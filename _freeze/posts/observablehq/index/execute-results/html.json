{
  "hash": "8bf1e669258fb2b560adeb478c0d2fb0",
  "result": {
    "markdown": "---\ntitle: 'First impressions of Observable JS: A language for interactive data visualisations'\ndescription: |\n    My experiences with Observable JS and an introductory course run by ObservableHQ.\ndate: \"2023-04-21\"\ncategories: [data visualisation, observable, training]\nfrom: markdown+emoji\nformat:\n  html:\n    toc: false\n    echo: false\n    keep-hidden: true\n    code-tools: true\nimage: \"thumbnail.svg\"\n---\n\n\nVisualising text data is difficult and interactive visualisations might help.\n\nWhen analysing text, often I want to visualise the aggregate characteristic of a document or corpus.\nFor example, in a sentiment analysis, I might want to showing the average number of words associated with each emotion in each document.\nThis reduces entire documents to a single point on a visualisation, which can allow readers to intuitively grasp the variation of emotions between documents.\nBut, this form of visualisation does not give readers an intuitive sense of which part of a document contains emotional content, or even what word is related to which emotion.\nThe most curious of readers might read up on the details of the sentiment analysis, but many won't, leaving readers untrusting or uncertain of the analysis and results.\n\nI think interactive data visualisations can help here.\nBroadly, interactive data visualisations are graphical representations of data which respond to user input, such as a click of a mouse or numbers typed into a keyboard.\nInteraction can be used to clarify specific data values or hand over control to readers.\nFor example, the graphic below represents the number of Australians for each year of age, as per the most recent national census.\nDeeper reds indicate more Aussies are of a certain age.\nWe can see quickly that there is higher number of Australians aged 48 to 50, compared the Australians in their mid-40s and early-50s.\nMore interested users can hover their house over a cell to see the exact number of Australians of any age, known as a tooltip.\nWith minimal space, we can represented both proportional numbers (via colours) and absolute numbers (via tooltips).\n\n\n::: {.cell warning.hidden='true' message.hidden='true'}\n\n```{.r .cell-code .hidden}\n# Load libraries\nlibrary(readr)\nlibrary(tidyr)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code .hidden}\n# Load 2021 Australian census data on age and gender\ncensus_data <- read_csv(\n  file = \"https://raw.githubusercontent.com/matt-lab/2021_census_stats/main/data/2021_sex-and-age.csv\",\n  col_names = c('age', 'male', 'female', 'total'),\n  col_select = c('age', 'total'),\n  col_types = list(col_integer()),\n  skip = 1,\n  show_col_types = FALSE)\nojs_define(census_data = census_data)\n```\n:::\n\n```{ojs}\n// Transpose data into convenient form for Plot\ncensus_data_transposed = transpose(census_data)\nimport {addTooltips} from \"@mkfreeman/plot-tooltip\"\n\naddTooltips(\n  Plot.barX(census_data_transposed, {\n    x: \"age\",\n    interval: 1,\n    fill: \"total\",\n    inset: 0, \n    title: (d) => d.total + \" Australians\" + \"\\n are \" + d.age + \" years old\"\n  }).plot({\n    color: {\n      type: \"linear\",\n      scheme: \"reds\", \n      legend: false\n    },\n    x: {label: \"Age (years)\"},\n    style: {paddingTop: 50}\n  })\n)\n```\n\n\nThe graphic above was made using the language of [Observable JS](https://quarto.org/docs/interactive/ojs/).\nThe creators of the language run a website called [ObservableHQ](https://observablehq.com/), where users can create notebooks of all kinds of interesting visualisations.\nI took my first steps into Observable JS with [a data visualisation course](https://observablehq.com/@observablehq/datavizcourse) run by [Robert Kosara](https://observablehq.com/@rkosara).\nI thought it was a useful primer for general data visualisation, Observable JS, and ObservableHQ.\n\n\nAs part of the course, I explored [pizza orders](https://observablehq.com/@observablehq/pizza-paradise-data).\nI found Veggie pizza was the seasonal underdog.\nIn 2022, Californians purchases of <span style=\"color:#40B0A6\"><strong>Veggie pizza</strong></span> was the most volatile <span style=\"color:#D3D3D3\"><strong>of all pizzas</strong></span> across the year, with peaks on <span style=\"color:#E1BE6A\"><strong>public holidays</strong></span>.\n\n<iframe width=\"100%\" height=\"476\" frameborder=\"0\"\n  src=\"https://observablehq.com/embed/21f984807f478fbd?cells=veggieSpending\"></iframe>\n\nObservableHQ notebooks are really neat. But, if you prefer `R`, check out how to make [interactive documents by combining Observable JS and R](https://quarto.org/docs/interactive/ojs/).\n\nI'll definitely be using Observable JS in the future!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script type=\"ojs-define\">\r\n{\"contents\":[{\"name\":\"census_data\",\"value\":{\"age\":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115],\"total\":[284576,286245,301381,312655,314519,319928,331063,341075,353303,355587,359229,362487,371996,374597,370276,368151,368059,371982,371385,367966,369464,358028,351793,334111,327822,318666,316452,316469,319301,324521,331411,344265,351555,326055,322696,308918,301719,299951,302630,311151,315483,312697,310898,298774,293164,286253,279015,274364,266220,257505,254658,245716,241192,235866,226470,223976,233262,189431,178187,166835,145927,141538,127654,120314,111569,101809,93253,83149,73133,64218,57544,50347,45590,39450,32070,26072,20181,15502,11480,8238,5746,4073,2425,1442,703,441,260,130,74,31,25,7,6,4,0,0,0,0]}}]}\r\n</script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}