{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Presentations\"\n",
        "echo: false\n",
        "jupyter: python3\n",
        "section-divs: false\n",
        "keep-md: true\n",
        "---\n",
        "\n",
        "\n",
        "A selection of my conference presentations, seminars, talks to research labs, tutorials, and posters.\n"
      ],
      "id": "fc9f6578"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Courtesy of https://ddimmery.com/posts/quarto-website/\n",
        "# Drew Dimmery. 2022. “Quarto for an Academic Website.” May 11, 2022. https://ddimmery.com/posts/quarto-website.\n",
        "import yaml\n",
        "from IPython.display import display, Markdown, HTML\n",
        "from datetime import date\n",
        "\n",
        "def readable_list(_s):\n",
        "  if len(_s) < 3:\n",
        "    return ' and '.join(map(str, _s))\n",
        "  *a, b = _s\n",
        "  return f\"{', '.join(map(str, a))}, & {b}\"\n",
        "def button(url, path, str, icon):\n",
        "    icon_base = icon[:2]\n",
        "    if path is not None:\n",
        "        url_full = f\"{path}/{url}\"\n",
        "    else:\n",
        "        url_full = url\n",
        "    return f\"\"\"<a class=\"btn btn-outline-dark btn-sm\", href=\"{url_full}\" target=\"_blank\" rel=\"noopener noreferrer\">\n",
        "        <i class=\"{icon_base} {icon}\" role='img' aria-label='{str}'></i>\n",
        "        {str}\n",
        "    </a>\"\"\"\n",
        "\n",
        "yaml_data = yaml.safe_load(open(\"presentations.yml\"))\n",
        "presentation_strs = {\"presentations\": {}}\n",
        "\n",
        "for _, data in yaml_data.items():\n",
        "\n",
        "    title_str = data[\"title\"]\n",
        "    authors = data.get(\"authors\", [\"me\"])\n",
        "    authors = [aut if aut != \"me\" else \"<strong>Andreotta, M.</strong>\" for aut in authors]\n",
        "    author_str = readable_list(authors)\n",
        "    year = data[\"year\"]\n",
        "    \n",
        "    buttons = []\n",
        "    path = data.get(\"type\")\n",
        "    html = data.get(\"html\")\n",
        "    if html is not None:\n",
        "        buttons.append(button(html, None, \"WEBSITE\", \"bi-link\"))\n",
        "    pdf = data.get(\"pdf\")\n",
        "    if pdf is not None:\n",
        "        buttons.append(button(pdf, f\"assets/{path}\", \"PDF\", \"bi-file-earmark-pdf\"))\n",
        "    pptx = data.get(\"pptx\")\n",
        "    if pptx is not None:\n",
        "        buttons.append(button(pptx, f\"assets/{path}\", \"PPTX\", \"bi-filetype-pptx\"))\n",
        "    url = data.get(\"url\")\n",
        "    if url is not None:\n",
        "        buttons.append(button(url, None, \"URL\", \"bi-globe\"))\n",
        "\n",
        "    delivered_to = data.get(\"for\")\n",
        "    location = data.get(\"location\")\n",
        "    setting = data.get(\"setting\")\n",
        "    presentation_type = data.get(\"type\")\n",
        "\n",
        "    presentation_str = f'{author_str} ({year}). \"<em>{title_str}</em>\", for {delivered_to}'\n",
        "\n",
        "    if location is not None:\n",
        "        presentation_str += f\" at {location}\"\n",
        "\n",
        "    if presentation_type == \"presentation\":\n",
        "        if setting not in presentation_strs[\"presentations\"]:\n",
        "            presentation_strs[\"presentations\"].update({setting: {}})\n",
        "        if year not in presentation_strs[\"presentations\"][setting]:\n",
        "            presentation_strs[\"presentations\"][setting][year] = []\n",
        "        presentation_strs[\"presentations\"][setting][year].append(\n",
        "            \"<li class='list-group-item'>\" + presentation_str + \".\" + \"<br>\" + \" \".join(buttons) + \"</li>\"\n",
        "        )"
      ],
      "id": "71809c27",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Presentations\n"
      ],
      "id": "c828c743"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: presentations\n",
        "#| output: asis\n",
        "\n",
        "for setting in presentation_strs[\"presentations\"].keys():\n",
        "    setting_key = setting.replace(\" \", \"-\")\n",
        "    setting_title = setting.capitalize()\n",
        "    display(Markdown(f\"### {setting_title}\" + \"{#\" + f\"setting_{setting_key}\" + \"}\"))\n",
        "\n",
        "    for year in sorted(presentation_strs[\"presentations\"][setting].keys(), reverse = True):\n",
        "        display(HTML(\n",
        "            \"<ul class='list-group list-group-flush'>\" + '\\n'.join(presentation_strs[\"presentations\"][setting][year]) + \"</ul>\"\n",
        "        ))"
      ],
      "id": "presentations",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}